#!/bin/bash  

export UUID=${UUID:-'26370883-aade-437b-8f63-5ededfbb2b7a'} # 如开启哪吒v1,不同的平台需要改一下，否则会覆盖
export NEZHA_SERVER=${NEZHA_SERVER:-''}       # v1哪吒填写形式：nezha.abc.com:8008,v0哪吒填写形式：nezha.abc.com
export NEZHA_PORT=${NEZHA_PORT:-''}           # v1哪吒必须留空,v0哪吒agent端口为{443,8443,2053,2083,2087,2096}其中之一时自动开启tls
export NEZHA_KEY=${NEZHA_KEY:-''}             # 哪吒v0-agent密钥或v1的NZ_CLIENT_SECRET
export ARGO_DOMAIN=${ARGO_DOMAIN:-''}         # 固定隧道域名,留空即启用临时隧道
export ARGO_AUTH=${ARGO_AUTH:-''}             # 固定隧道token或json,留空即启用临时隧道, json获取：https://json.zone.id
export CFIP=${CFIP:-'time.is'}                # argo节点优选域名或优选ip
export CFPORT=${CFPORT:-'443'}                # argo节点端口 
export NAME=${NAME:-'sbx'}                    # 节点名称  
export FILE_PATH=${FILE_PATH:-'./.tmp'}       # sub.txt节点保存路径  
export ARGO_PORT=${ARGO_PORT:-'34231'}         # argo端口, 如节点不通可以修改，使用固定隧道token,cloudflare后台设置的端口需和这里对应
# export ARGO_PORT=${ARGO_PORT:-$(shuf -i 2000-65000 -n 1)} # 去掉此行开头的#号并将上面一行删除或注释即使用随机端口，配置固定隧道json使用
export TUIC_PORT=${TUIC_PORT:-''}             # Tuic 端口，支持多端口玩具可填写，否则不动
export HY2_PORT=${HY2_PORT:-''}               # Hy2 端口，支持多端口玩具可填写，否则不动
export REALITY_PORT=${REALITY_PORT:-''}       # reality 端口,支持多端口玩具可填写，否则不动   
export CHAT_ID=${CHAT_ID:-''}                 # TG chat_id，可在https://t.me/laowang_serv00_bot 获取
export BOT_TOKEN=${BOT_TOKEN:-''}             # TG bot_token, 使用自己的bot需要填写,使用上方的bot不用填写,不会给别人发送
export UPLOAD_URL=${UPLOAD_URL:-''}  # 订阅自动上传地址,没有可不填,需要填部署Merge-sub项目后的首页地址,例如：https://merge.zabc.net

echo "CmlmIFsgLWYgIi5lbnYiIF07IHRoZW4KICAgIHNldCAtbyBhbGxleHBvcnQgIAogICAgc291cmNlIDwoZ3JlcCAtdiAnXiMnIC5lbnYgfCBzZWQgJ3MvXmV4cG9ydCAvLycgKQogICAgc2V0ICtvIGFsbGV4cG9ydApmaQoKcGtpbGwgLWYgJ1wnJHtGSUxFX1BBVEh9Jy8nID4gL2Rldi9udWxsIDI+JjEKClsgISAtZCAiJHtGSUxFX1BBVEh9IiBdICYmIG1rZGlyIC1wICIke0ZJTEVfUEFUSH0iCgpkZWxldGVfb2xkX25vZGVzKCkgewogIFtbIC16ICRVUExPQURfVVJMIHx8ICEgLWYgIiR7RklMRV9QQVRIfS9zdWIudHh0IiBdXSAmJiByZXR1cm4KICBvbGRfbm9kZXM9JChiYXNlNjQgLWQgIiR7RklMRV9QQVRIfS9zdWIudHh0IiB8IGdyZXAgLUUgJyh2bGVzc3x2bWVzc3x0cm9qYW58aHlzdGVyaWEyfHR1aWMpOi8vJykKICBbWyAteiAkb2xkX25vZGVzIF1dICYmIHJldHVybgoKICBqc29uX2RhdGE9J3sibm9kZXMiOiBbJwogIGZvciBub2RlIGluICRvbGRfbm9kZXM7IGRvCiAgICAgIGpzb25fZGF0YSs9IlwiJG5vZGVcIiwiCiAgZG9uZQogIGpzb25fZGF0YT0ke2pzb25fZGF0YSUsfSAgCiAganNvbl9kYXRhKz0nXX0nCgogIGN1cmwgLVggREVMRVRFICIkVVBMT0FEX1VSTC9hcGkvZGVsZXRlLW5vZGVzIiBcCiAgICAgICAgLUggIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiIgXAogICAgICAgIC1kICIkanNvbl9kYXRhIiA+IC9kZXYvbnVsbCAyPiYxCn0KZGVsZXRlX29sZF9ub2RlcwoKcm0gLXJmIGJvb3QubG9nIGNvbmZpZy5qc29uIHR1bm5lbC5qc29uIHR1bm5lbC55bWwgIiR7RklMRV9QQVRIfS9zdWIudHh0IiA+L2Rldi9udWxsIDI+JjEKCmFyZ29fY29uZmlndXJlKCkgewogIGlmIFtbIC16ICRBUkdPX0FVVEggfHwgLXogJEFSR09fRE9NQUlOIF1dOyB0aGVuCiAgICBlY2hvIC1lICJcZVsxOzMybUFSR09fRE9NQUlOIG9yIEFSR09fQVVUSCB2YXJpYWJsZSBpcyBlbXB0eSwgdXNlIHF1aWNrIHR1bm5lbHNcZVswbSIgICAKICAgIHJldHVybgogIGZpCgogIGlmIFtbICRBUkdPX0FVVEggPX4gVHVubmVsU2VjcmV0IF1dOyB0aGVuCiAgICBlY2hvICRBUkdPX0FVVEggPiAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24KICAgIGNhdCA+IHR1bm5lbC55bWwgPDwgRU9GCnR1bm5lbDogJChjdXQgLWRcIiAtZjEyIDw8PCAiJEFSR09fQVVUSCIpCmNyZWRlbnRpYWxzLWZpbGU6ICR7RklMRV9QQVRIfS90dW5uZWwuanNvbgpwcm90b2NvbDogaHR0cDIKCmluZ3Jlc3M6CiAgLSBob3N0bmFtZTogJEFSR09fRE9NQUlOCiAgICBzZXJ2aWNlOiBodHRwOi8vbG9jYWxob3N0OiRBUkdPX1BPUlQKICAgIG9yaWdpblJlcXVlc3Q6CiAgICAgIG5vVExTVmVyaWZ5OiB0cnVlCiAgLSBzZXJ2aWNlOiBodHRwX3N0YXR1czo0MDQKRU9GCiAgZWxzZQogICAgZWNobyAtZSAiXGVbMTszMm1Vc2luZyB0b2tlbiBjb25uZWN0IHRvIHR1bm5lbCxwbGVhc2Ugc2V0ICRBUkdPX1BPUlQgaW4gY2xvdWRmbGFyZSB0dW5uZWxcZVswbSIKICBmaQp9CmFyZ29fY29uZmlndXJlCndhaXQKCmRvd25sb2FkX2FuZF9ydW4oKSB7CkFSQ0g9JCh1bmFtZSAtbSkgJiYgRklMRV9JTkZPPSgpCmlmIFsgIiRBUkNIIiA9PSAiYXJtIiBdIHx8IFsgIiRBUkNIIiA9PSAiYXJtNjQiIF0gfHwgWyAiJEFSQ0giID09ICJhYXJjaDY0IiBdOyB0aGVuCiAgICBCQVNFX1VSTD0iaHR0cHM6Ly9hcm02NC5zc3NzLm55Yy5tbiIKZWxpZiBbICIkQVJDSCIgPT0gImFtZDY0IiBdIHx8IFsgIiRBUkNIIiA9PSAieDg2XzY0IiBdIHx8IFsgIiRBUkNIIiA9PSAieDg2IiBdOyB0aGVuCiAgICBCQVNFX1VSTD0iaHR0cHM6Ly9hbWQ2NC5zc3NzLm55Yy5tbiIKZWxpZiBbICIkQVJDSCIgPT0gInMzOTB4IiBdIHx8IFsgIiRBUkNIIiA9PSAiczM5MCIgXTsgdGhlbgogICAgQkFTRV9VUkw9Imh0dHBzOi8vczM5MHguc3Nzcy5ueWMubW4iCmVsc2UKICAgIGVjaG8gIlVuc3VwcG9ydGVkIGFyY2hpdGVjdHVyZTogJEFSQ0giCiAgICBleGl0IDEKZmkKRklMRV9JTkZPPSgiJEJBU0VfVVJML3NiIHdlYiIgIiRCQVNFX1VSTC9ib3QgYm90IikKCmlmIFsgLW4gIiRORVpIQV9TRVJWRVIiIF0gJiYgWyAtbiAiJE5FWkhBX1BPUlQiIF0gJiYgWyAtbiAiJE5FWkhBX0tFWSIgXTsgdGhlbgogICAgRklMRV9JTkZPKz0oIiRCQVNFX1VSTC9hZ2VudCBucG0iKQplbGlmIFsgLW4gIiRORVpIQV9TRVJWRVIiIF0gJiYgWyAtbiAiJE5FWkhBX0tFWSIgXTsgdGhlbgogICAgRklMRV9JTkZPKz0oIiRCQVNFX1VSTC92MSBwaHAiKQogICAgTkVaSEFfVExTPSQoY2FzZSAiJHtORVpIQV9TRVJWRVIjIyo6fSIgaW4gNDQzfDg0NDN8MjA5NnwyMDg3fDIwODN8MjA1MykgZWNobyAtbiB0cnVlOzsgKikgZWNobyAtbiBmYWxzZTs7IGVzYWMpCiAgICBjYXQgPiAiJHtGSUxFX1BBVEh9L2NvbmZpZy55YW1sIiA8PCBFT0YKY2xpZW50X3NlY3JldDogJHtORVpIQV9LRVl9CmRlYnVnOiBmYWxzZQpkaXNhYmxlX2F1dG9fdXBkYXRlOiB0cnVlCmRpc2FibGVfY29tbWFuZF9leGVjdXRlOiBmYWxzZQpkaXNhYmxlX2ZvcmNlX3VwZGF0ZTogdHJ1ZQpkaXNhYmxlX25hdDogZmFsc2UKZGlzYWJsZV9zZW5kX3F1ZXJ5OiBmYWxzZQpncHU6IGZhbHNlCmluc2VjdXJlX3RsczogZmFsc2UKaXBfcmVwb3J0X3BlcmlvZDogMTgwMApyZXBvcnRfZGVsYXk6IDQKc2VydmVyOiAke05FWkhBX1NFUlZFUn0Kc2tpcF9jb25uZWN0aW9uX2NvdW50OiBmYWxzZQpza2lwX3Byb2NzX2NvdW50OiBmYWxzZQp0ZW1wZXJhdHVyZTogZmFsc2UKdGxzOiAke05FWkhBX1RMU30KdXNlX2dpdGVlX3RvX3VwZ3JhZGU6IGZhbHNlCnVzZV9pcHY2X2NvdW50cnlfY29kZTogZmFsc2UKdXVpZDogJHtVVUlEfQpFT0YKZWxzZQogICAgZWNobyAtZSAiXGVbMTszNW1za2lwcGluZyBkb3dubG9hZCBuZXpoYVxlWzBtIgpmaQoKZGVjbGFyZSAtQSBGSUxFX01BUApnZW5lcmF0ZV9yYW5kb21fbmFtZSgpIHsKICAgIGxvY2FsIGNoYXJzPWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MTIzNDU2Nzg5MAogICAgbG9jYWwgbmFtZT0iIgogICAgZm9yIGkgaW4gezEuLjZ9OyBkbwogICAgICAgIG5hbWU9IiRuYW1lJHtjaGFyczpSQU5ET00lJHsjY2hhcnN9OjF9IgogICAgZG9uZQogICAgZWNobyAiJG5hbWUiCn0KZG93bmxvYWRfZmlsZSgpIHsKICAgIGxvY2FsIFVSTD0kMQogICAgbG9jYWwgTkVXX0ZJTEVOQU1FPSQyCgogICAgaWYgY29tbWFuZCAtdiBjdXJsID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAgIGN1cmwgLUwgLXNTIC1vICIkTkVXX0ZJTEVOQU1FIiAiJFVSTCIKICAgICAgICBlY2hvIC1lICJcZVsxOzMybURvd25sb2FkZWQgJE5FV19GSUxFTkFNRSBieSBjdXJsXGVbMG0iCiAgICBlbGlmIGNvbW1hbmQgLXYgd2dldCA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICAgICB3Z2V0IC1xIC1PICIkTkVXX0ZJTEVOQU1FIiAiJFVSTCIKICAgICAgICBlY2hvIC1lICJcZVsxOzMybURvd25sb2FkZWQgJE5FV19GSUxFTkFNRSBieSB3Z2V0XGVbMG0iCiAgICBlbHNlCiAgICAgICAgZWNobyAtZSAiXGVbMTszM21OZWl0aGVyIGN1cmwgbm9yIHdnZXQgaXMgYXZhaWxhYmxlIGZvciBkb3dubG9hZGluZ1xlWzBtIgogICAgICAgIGV4aXQgMQogICAgZmkKfQpmb3IgZW50cnkgaW4gIiR7RklMRV9JTkZPW0BdfSI7IGRvCiAgICBVUkw9JChlY2hvICIkZW50cnkiIHwgY3V0IC1kICcgJyAtZiAxKQogICAgUkFORE9NX05BTUU9JChnZW5lcmF0ZV9yYW5kb21fbmFtZSkKICAgIE5FV19GSUxFTkFNRT0iJHtGSUxFX1BBVEh9LyRSQU5ET01fTkFNRSIKICAgIAogICAgZG93bmxvYWRfZmlsZSAiJFVSTCIgIiRORVdfRklMRU5BTUUiCiAgICAKICAgIGNobW9kICt4ICIkTkVXX0ZJTEVOQU1FIgogICAgRklMRV9NQVBbJChlY2hvICIkZW50cnkiIHwgY3V0IC1kICcgJyAtZiAyKV09IiRORVdfRklMRU5BTUUiCmRvbmUKd2FpdAoKb3V0cHV0PSQoIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbd2ViXX0pIiBnZW5lcmF0ZSByZWFsaXR5LWtleXBhaXIpCnByaXZhdGVfa2V5PSQoZWNobyAiJHtvdXRwdXR9IiB8IGF3ayAnL1ByaXZhdGVLZXk6LyB7cHJpbnQgJDJ9JykKcHVibGljX2tleT0kKGVjaG8gIiR7b3V0cHV0fSIgfCBhd2sgJy9QdWJsaWNLZXk6LyB7cHJpbnQgJDJ9JykKCm9wZW5zc2wgZWNwYXJhbSAtZ2Vua2V5IC1uYW1lIHByaW1lMjU2djEgLW91dCAiJHtGSUxFX1BBVEh9L3ByaXZhdGUua2V5IgpvcGVuc3NsIHJlcSAtbmV3IC14NTA5IC1kYXlzIDM2NTAgLWtleSAiJHtGSUxFX1BBVEh9L3ByaXZhdGUua2V5IiAtb3V0ICIke0ZJTEVfUEFUSH0vY2VydC5wZW0iIC1zdWJqICIvQ049YmluZy5jb20iCgogIGNhdCA+ICR7RklMRV9QQVRIfS9jb25maWcuanNvbiA8PCBFT0YKewogICAgImxvZyI6IHsKICAgICAgImRpc2FibGVkIjogdHJ1ZSwKICAgICAgImxldmVsIjogImVycm9yIiwKICAgICAgInRpbWVzdGFtcCI6IHRydWUKICAgIH0sCiAgICAiaW5ib3VuZHMiOiBbCiAgICB7CiAgICAgICJ0YWciOiAidm1lc3Mtd3MtaW4iLAogICAgICAidHlwZSI6ICJ2bWVzcyIsCiAgICAgICJsaXN0ZW4iOiAiOjoiLAogICAgICAibGlzdGVuX3BvcnQiOiAke0FSR09fUE9SVH0sCiAgICAgICAgInVzZXJzIjogWwogICAgICAgIHsKICAgICAgICAgICJ1dWlkIjogIiR7VVVJRH0iCiAgICAgICAgfQogICAgICBdLAogICAgICAidHJhbnNwb3J0IjogewogICAgICAgICJ0eXBlIjogIndzIiwKICAgICAgICAicGF0aCI6ICIvdm1lc3MtYXJnbyIsCiAgICAgICAgImVhcmx5X2RhdGFfaGVhZGVyX25hbWUiOiAiU2VjLVdlYlNvY2tldC1Qcm90b2NvbCIKICAgICAgfQogICAgfSQoaWYgWyAiJFRVSUNfUE9SVCIgIT0gIiIgXTsgdGhlbiBlY2hvICcsCiAgICB7CiAgICAgICJ0YWciOiAidHVpYy1pbiIsCiAgICAgICJ0eXBlIjogInR1aWMiLAogICAgICAibGlzdGVuIjogIjo6IiwKICAgICAgImxpc3Rlbl9wb3J0IjogJyR7VFVJQ19QT1JUfScsCiAgICAgICJ1c2VycyI6IFsKICAgICAgICB7CiAgICAgICAgICAidXVpZCI6ICInJHtVVUlEfSciLAogICAgICAgICAgInBhc3N3b3JkIjogImFkbWluIgogICAgICAgIH0KICAgICAgXSwKICAgICAgImNvbmdlc3Rpb25fY29udHJvbCI6ICJiYnIiLAogICAgICAidGxzIjogewogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAiYWxwbiI6IFsKICAgICAgICAgICJoMyIKICAgICAgICBdLAogICAgICAgICJjZXJ0aWZpY2F0ZV9wYXRoIjogIicke0ZJTEVfUEFUSH0nL2NlcnQucGVtIiwKICAgICAgICAia2V5X3BhdGgiOiAiJyR7RklMRV9QQVRIfScvcHJpdmF0ZS5rZXkiCiAgICAgIH0KICAgIH0nOyBmaSkkKGlmIFsgIiRIWTJfUE9SVCIgIT0gIiIgXTsgdGhlbiBlY2hvICcsCiAgICB7CiAgICAgICJ0YWciOiAiaHlzdGVyaWEyLWluIiwKICAgICAgInR5cGUiOiAiaHlzdGVyaWEyIiwKICAgICAgImxpc3RlbiI6ICI6OiIsCiAgICAgICJsaXN0ZW5fcG9ydCI6ICcke0hZMl9QT1JUfScsCiAgICAgICAgInVzZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAgInBhc3N3b3JkIjogIicke1VVSUR9JyIKICAgICAgICAgIH0KICAgICAgXSwKICAgICAgIm1hc3F1ZXJhZGUiOiAiaHR0cHM6Ly9iaW5nLmNvbSIsCiAgICAgICAgInRscyI6IHsKICAgICAgICAgICAgImVuYWJsZWQiOiB0cnVlLAogICAgICAgICAgICAiYWxwbiI6IFsKICAgICAgICAgICAgICAgICJoMyIKICAgICAgICAgICAgXSwKICAgICAgICAgICAgImNlcnRpZmljYXRlX3BhdGgiOiAiJyR7RklMRV9QQVRIfScvY2VydC5wZW0iLAogICAgICAgICAgICAia2V5X3BhdGgiOiAiJyR7RklMRV9QQVRIfScvcHJpdmF0ZS5rZXkiCiAgICAgICAgICB9CiAgICAgIH0nOyBmaSkkKGlmIFsgIiRSRUFMSVRZX1BPUlQiICE9ICIiIF07IHRoZW4gZWNobyAnLAogICAgICB7CiAgICAgICAgInRhZyI6ICJ2bGVzcy1yZWFsaXR5LXZlc2lvbiIsCiAgICAgICAgInR5cGUiOiAidmxlc3MiLAogICAgICAgICJsaXN0ZW4iOiAiOjoiLAogICAgICAgICJsaXN0ZW5fcG9ydCI6ICcke1JFQUxJVFlfUE9SVH0nLAogICAgICAgICAgInVzZXJzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ1dWlkIjogIickVVVJRCciLAogICAgICAgICAgICAgICAgImZsb3ciOiAieHRscy1ycHJ4LXZpc2lvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgInRscyI6IHsKICAgICAgICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgICAgICAgInNlcnZlcl9uYW1lIjogInd3dy5uYXpodW1pLmNvbSIsCiAgICAgICAgICAgICAgInJlYWxpdHkiOiB7CiAgICAgICAgICAgICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgImhhbmRzaGFrZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJzZXJ2ZXIiOiAid3d3Lm5hemh1bWkuY29tIiwKICAgICAgICAgICAgICAgICAgICAgICJzZXJ2ZXJfcG9ydCI6IDQ0MwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAicHJpdmF0ZV9rZXkiOiAiJyRwcml2YXRlX2tleSciLAogICAgICAgICAgICAgICAgICAic2hvcnRfaWQiOiBbCiAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgfSc7IGZpKQogICBdLAogICJvdXRib3VuZHMiOiBbCiAgICB7CiAgICAgICJ0eXBlIjogImRpcmVjdCIsCiAgICAgICJ0YWciOiAiZGlyZWN0IgogICAgfSwKICAgIHsKICAgICAgInR5cGUiOiAiYmxvY2siLAogICAgICAidGFnIjogImJsb2NrIgogICAgfSwKICAgIHsKICAgICAgInR5cGUiOiAid2lyZWd1YXJkIiwKICAgICAgInRhZyI6ICJ3aXJlZ3VhcmQtb3V0IiwKICAgICAgInNlcnZlciI6ICIxNjIuMTU5LjE5Mi4yMDAiLAogICAgICAic2VydmVyX3BvcnQiOiA0NTAwLAogICAgICAibG9jYWxfYWRkcmVzcyI6IFsKICAgICAgICAiMTcyLjE2LjAuMi8zMiIsCiAgICAgICAgIjI2MDY6NDcwMDoxMTA6OGY3NzoxY2E5OmYwODY6ODQ2Yzo1ZjllLzEyOCIKICAgICAgXSwKICAgICAgInByaXZhdGVfa2V5IjogIndJeHN6ZFIybk1kQTdhMlVsM1hRY25pU2ZTWnFkcWpQYjZ3Nm9wdmY1QVU9IiwKICAgICAgInBlZXJfcHVibGljX2tleSI6ICJibVhPQytGMUZ4RU1GOWR5aUsySDUvMVNVdHpIMEp1Vm81MWgyd1BmZ3lvPSIsCiAgICAgICJyZXNlcnZlZCI6IFsxMjYsIDI0NiwgMTczXQogICAgfQogIF0sCiAgInJvdXRlIjogewogICAgInJ1bGVfc2V0IjogWwogICAgICB7CiAgICAgICAgInRhZyI6ICJuZXRmbGl4IiwKICAgICAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgICAgICJmb3JtYXQiOiAiYmluYXJ5IiwKICAgICAgICAidXJsIjogImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NZXRhQ3ViZVgvbWV0YS1ydWxlcy1kYXQvc2luZy9nZW8vZ2Vvc2l0ZS9uZXRmbGl4LnNycyIsCiAgICAgICAgImRvd25sb2FkX2RldG91ciI6ICJkaXJlY3QiCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAidGFnIjogIm9wZW5haSIsCiAgICAgICAgInR5cGUiOiAicmVtb3RlIiwKICAgICAgICAiZm9ybWF0IjogImJpbmFyeSIsCiAgICAgICAgInVybCI6ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWV0YUN1YmVYL21ldGEtcnVsZXMtZGF0L3NpbmcvZ2VvL2dlb3NpdGUvb3BlbmFpLnNycyIsCiAgICAgICAgImRvd25sb2FkX2RldG91ciI6ICJkaXJlY3QiCiAgICAgIH0KICAgIF0sCiAgICAicnVsZXMiOiBbCiAgICAgIHsKICAgICAgICAicnVsZV9zZXQiOiBbIm5ldGZsaXgiLCAib3BlbmFpIl0sCiAgICAgICAgIm91dGJvdW5kIjogIndpcmVndWFyZC1vdXQiCiAgICAgIH0KICAgIF0sCiAgICAiZmluYWwiOiAiZGlyZWN0IgogIH0KfQpFT0YKCmlmIFsgLWUgIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbd2ViXX0pIiBdOyB0aGVuCiAgICBub2h1cCAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFt3ZWJdfSkiIHJ1biAtYyAke0ZJTEVfUEFUSH0vY29uZmlnLmpzb24gPi9kZXYvbnVsbCAyPiYxICYKICAgIHNsZWVwIDIKICAgIGVjaG8gLWUgIlxlWzE7MzJtJChiYXNlbmFtZSAke0ZJTEVfTUFQW3dlYl19KSBpcyBydW5uaW5nXGVbMG0iCmZpCgppZiBbIC1lICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW2JvdF19KSIgXTsgdGhlbgogICAgaWYgW1sgJEFSR09fQVVUSCA9fiBeW0EtWjAtOWEtej1dezEyMCwyNTB9JCBdXTsgdGhlbgogICAgICBhcmdzPSJ0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLW5vLWF1dG91cGRhdGUgLS1wcm90b2NvbCBodHRwMiBydW4gLS10b2tlbiAke0FSR09fQVVUSH0iCiAgICBlbGlmIFtbICRBUkdPX0FVVEggPX4gVHVubmVsU2VjcmV0IF1dOyB0aGVuCiAgICAgIGFyZ3M9InR1bm5lbCAtLWVkZ2UtaXAtdmVyc2lvbiBhdXRvIC0tY29uZmlnICR7RklMRV9QQVRIfS90dW5uZWwueW1sIHJ1biIKICAgIGVsc2UKICAgICAgYXJncz0idHVubmVsIC0tZWRnZS1pcC12ZXJzaW9uIGF1dG8gLS1uby1hdXRvdXBkYXRlIC0tcHJvdG9jb2wgaHR0cDIgLS1sb2dmaWxlICR7RklMRV9QQVRIfS9ib290LmxvZyAtLWxvZ2xldmVsIGluZm8gLS11cmwgaHR0cDovL2xvY2FsaG9zdDokQVJHT19QT1JUIgogICAgZmkKICAgIG5vaHVwICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW2JvdF19KSIgJGFyZ3MgPi9kZXYvbnVsbCAyPiYxICYKICAgIHNsZWVwIDIKICAgIGVjaG8gLWUgIlxlWzE7MzJtJChiYXNlbmFtZSAke0ZJTEVfTUFQW2JvdF19KSBpcyBydW5uaW5nXGVbMG0iIApmaQoKaWYgWyAtbiAiJE5FWkhBX1NFUlZFUiIgXSAmJiBbIC1uICIkTkVaSEFfUE9SVCIgXSAmJiBbIC1uICIkTkVaSEFfS0VZIiBdOyB0aGVuCiAgICBpZiBbIC1lICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSIgXTsgdGhlbgogICAgICB0bHNQb3J0cz0oIjQ0MyIgIjg0NDMiICIyMDk2IiAiMjA4NyIgIjIwODMiICIyMDUzIikKICAgICAgW1sgIiR7dGxzUG9ydHNbKl19IiA9fiAiJHtORVpIQV9QT1JUfSIgXV0gJiYgTkVaSEFfVExTPSItLXRscyIgfHwgTkVaSEFfVExTPSIiCiAgICAgIGV4cG9ydCBUTVBESVI9JChwd2QpCiAgICAgIG5vaHVwICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSIgLXMgJHtORVpIQV9TRVJWRVJ9OiR7TkVaSEFfUE9SVH0gLXAgJHtORVpIQV9LRVl9ICR7TkVaSEFfVExTfSA+L2Rldi9udWxsIDI+JjEgJgogICAgICBzbGVlcCAyCiAgICAgIGVjaG8gLWUgIlxlWzE7MzJtJChiYXNlbmFtZSAke0ZJTEVfTUFQW25wbV19KSBpcyBydW5uaW5nXGVbMG0iCiAgICBmaQplbGlmIFsgLW4gIiRORVpIQV9TRVJWRVIiIF0gJiYgWyAtbiAiJE5FWkhBX0tFWSIgXTsgdGhlbgogICAgaWYgWyAtZSAiJHtGSUxFX1BBVEh9LyQoYmFzZW5hbWUgJHtGSUxFX01BUFtwaHBdfSkiIF07IHRoZW4KICAgICAgbm9odXAgIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbcGhwXX0pIiAtYyAiJHtGSUxFX1BBVEh9L2NvbmZpZy55YW1sIiA+L2Rldi9udWxsIDI+JjEgJgogICAgICBlY2hvIC1lICJcZVsxOzMybSR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbcGhwXX0pIGlzIHJ1bm5pbmdcZVswbSIKICAgIGZpCmVsc2UKICAgIGVjaG8gLWUgIlxlWzE7MzVtTkVaSEEgdmFyaWFibGUgaXMgZW1wdHksIHNraXBwaW5nIHJ1bm5pbmdcZVswbSIKZmkKCmZvciBrZXkgaW4gIiR7IUZJTEVfTUFQW0BdfSI7IGRvCiAgICBpZiBbIC1lICIke0ZJTEVfUEFUSH0vJChiYXNlbmFtZSAke0ZJTEVfTUFQWyRrZXldfSkiIF07IHRoZW4KICAgICAgICBybSAtcmYgIiR7RklMRV9QQVRIfS8kKGJhc2VuYW1lICR7RklMRV9NQVBbJGtleV19KSIgPi9kZXYvbnVsbCAyPiYxCiAgICBmaQpkb25lCn0KZG93bmxvYWRfYW5kX3J1bgoKZ2V0X2FyZ29kb21haW4oKSB7CiAgaWYgW1sgLW4gJEFSR09fQVVUSCBdXTsgdGhlbgogICAgZWNobyAiJEFSR09fRE9NQUlOIgogIGVsc2UKICAgIGxvY2FsIHJldHJ5PTAKICAgIGxvY2FsIG1heF9yZXRyaWVzPTgKICAgIGxvY2FsIGFyZ29kb21haW49IiIKICAgIHdoaWxlIFtbICRyZXRyeSAtbHQgJG1heF9yZXRyaWVzIF1dOyBkbwogICAgICAoKHJldHJ5KyspKQogICAgICBhcmdvZG9tYWluPSQoc2VkIC1uICdzfC4qaHR0cHM6Ly9cKFteL10qdHJ5Y2xvdWRmbGFyZVwuY29tXCkuKnxcMXxwJyAke0ZJTEVfUEFUSH0vYm9vdC5sb2cpCiAgICAgIGlmIFtbIC1uICRhcmdvZG9tYWluIF1dOyB0aGVuCiAgICAgICAgYnJlYWsKICAgICAgZmkKICAgICAgc2xlZXAgMQogICAgZG9uZQogICAgZWNobyAiJGFyZ29kb21haW4iCiAgZmkKfQoKc2VuZF90ZWxlZ3JhbSgpIHsKICBbIC1mICIke0ZJTEVfUEFUSH0vc3ViLnR4dCIgXSB8fCByZXR1cm4KICBNRVNTQUdFPSQoY2F0ICIke0ZJTEVfUEFUSH0vc3ViLnR4dCIpCiAgTE9DQUxfTUVTU0FHRT0iKiR7TkFNRX3oioLngrnmjqjpgIHpgJrnn6UqXGBcYFxgJHtNRVNTQUdFfVxgXGBcYCIKICBCT1RfTUVTU0FHRT0iPGI+JHtOQU1FfeiKgueCueaOqOmAgemAmuefpTwvYj5cbjxwcmU+JHtNRVNTQUdFfTwvcHJlPiIKICBpZiBbIC1uICIke0JPVF9UT0tFTn0iIF0gJiYgWyAtbiAiJHtDSEFUX0lEfSIgXTsgdGhlbgogICAgY3VybCAtcyAtWCBQT1NUICJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90JHtCT1RfVE9LRU59L3NlbmRNZXNzYWdlIiBcCiAgICAgIC1kICJjaGF0X2lkPSR7Q0hBVF9JRH0mdGV4dD0ke0xPQ0FMX01FU1NBR0V9JnBhcnNlX21vZGU9TWFya2Rvd24iID4gL2Rldi9udWxsCgogIGVsaWYgWyAtbiAiJHtDSEFUX0lEfSIgXTsgdGhlbgogICAgY3VybCAtcyAtWCBQT1NUICJodHRwOi8vYXBpLnRnLmd2cmFuZGVyLmV1Lm9yZy9hcGkvbm90aWZ5IiBcCiAgICAgIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgZUpXUmd4QzRMY3puS0xpVWlEb1Vzd0BuTWdEQkNDU1VrNkl3MFM5UGJzIiBcCiAgICAgIC1IICJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24iIFwKICAgICAgLWQgIiQocHJpbnRmICd7ImNoYXRfaWQiOiAiJXMiLCAibWVzc2FnZSI6ICIlcyJ9JyAiJHtDSEFUX0lEfSIgIiR7Qk9UX01FU1NBR0V9IikiID4gL2Rldi9udWxsCiAgZWxzZQogICAgZWNobyAtZSAiXG5cZVsxOzM1bVRHIHZhcmlhYmxlIGlzIGVtcHR5LHNraXBwaW5nIHNlbnRcZVswbSIKICAgIHJldHVybgogIGZpCgogIGlmIFsgJD8gLWVxIDAgXTsgdGhlbgogICAgZWNobyAtZSAiXG5cZVsxOzMybU5vZGVzIHNlbnQgdG8gVEcgc3VjY2Vzc2Z1bGx5XGVbMG0iCiAgZWxzZQogICAgZWNobyAtZSAiXG5cZVsxOzMxbUZhaWxlZCB0byBzZW5kIG5vZGVzIHRvIFRHXGVbMG0iCiAgZmkKfQoKdXBsb2Rfbm9kZXMoKSB7CiAgICBbWyAteiAkVVBMT0FEX1VSTCB8fCAhIC1mICIke0ZJTEVfUEFUSH0vbGlzdC50eHQiIF1dICYmIHJldHVybgogICAgY29udGVudD0kKGNhdCAke0ZJTEVfUEFUSH0vbGlzdC50eHQpCiAgICBub2Rlcz0kKGVjaG8gIiRjb250ZW50IiB8IGdyZXAgLUUgJyh2bGVzc3x2bWVzc3x0cm9qYW58aHlzdGVyaWEyfHR1aWMpOi8vJykKICAgIFtbIC16ICRub2RlcyBdXSAmJiByZXR1cm4KICAgIG5vZGVzPSgkbm9kZXMpCiAgICBqc29uX2RhdGE9J3sibm9kZXMiOiBbJwogICAgZm9yIG5vZGUgaW4gIiR7bm9kZXNbQF19IjsgZG8KICAgICAgICBqc29uX2RhdGErPSJcIiRub2RlXCIsIgogICAgZG9uZQogICAganNvbl9kYXRhPSR7anNvbl9kYXRhJSx9CiAgICBqc29uX2RhdGErPSddfScKCiAgICBjdXJsIC1YIFBPU1QgIiRVUExPQURfVVJML2FwaS9hZGQtbm9kZXMiIFwKICAgICAgICAgLUggIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiIgXAogICAgICAgICAtZCAiJGpzb25fZGF0YSIgPiAvZGV2L251bGwgMj4mMQoKICAgIGlmIFtbICQ/IC1lcSAwIF1dOyB0aGVuCiAgICAgICAgZWNobyAtZSAiXDAzM1sxOzMybU5vZGVzIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseVwwMzNbMG0iCiAgICBlbHNlCiAgICAgICAgZWNobyAtZSAiXDAzM1sxOzMxbUZhaWxlZCB0byB1cGxvYWQgbm9kZXNcMDMzWzBtIgogICAgZmkKfQoKYXJnb2RvbWFpbj0kKGdldF9hcmdvZG9tYWluKQplY2hvIC1lICJcZVsxOzMybUFyZ29Eb21haW46XGVbMTszNW0ke2FyZ29kb21haW59XGVbMG1cbiIKc2xlZXAgMQpJUD0kKGN1cmwgLXMgLS1tYXgtdGltZSAyIGlwdjQuaXAuc2IgfHwgY3VybCAtcyAtLW1heC10aW1lIDEgYXBpLmlwaWZ5Lm9yZyB8fCB7IGlwdjY9JChjdXJsIC1zIC0tbWF4LXRpbWUgMSBpcHY2LmlwLnNiKTsgZWNobyAiWyRpcHY2XSI7IH0gfHwgZWNobyAiWFhYIikKSVNQPSQoY3VybCAtcyAtLW1heC10aW1lIDIgaHR0cHM6Ly9zcGVlZC5jbG91ZGZsYXJlLmNvbS9tZXRhIHwgYXdrIC1GXCIgJ3twcmludCAkMjYiLSIkMTh9JyB8IHNlZCAtZSAncy8gL18vZycgfHwgZWNobyAiMC4wIikKY29zdG9tX25hbWUoKSB7IGlmIFsgLW4gIiROQU1FIiBdOyB0aGVuIGVjaG8gIiR7TkFNRX1fJHtJU1B9IjsgZWxzZSBlY2hvICIke0lTUH0iOyBmaTsgfQoKVk1FU1M9InsgXCJ2XCI6IFwiMlwiLCBcInBzXCI6IFwiJChjb3N0b21fbmFtZSlcIiwgXCJhZGRcIjogXCIke0NGSVB9XCIsIFwicG9ydFwiOiBcIiR7Q0ZQT1JUfVwiLCBcImlkXCI6IFwiJHtVVUlEfVwiLCBcImFpZFwiOiBcIjBcIiwgXCJzY3lcIjogXCJub25lXCIsIFwibmV0XCI6IFwid3NcIiwgXCJ0eXBlXCI6IFwibm9uZVwiLCBcImhvc3RcIjogXCIke2FyZ29kb21haW59XCIsIFwicGF0aFwiOiBcIi92bWVzcy1hcmdvP2VkPTI1NjBcIiwgXCJ0bHNcIjogXCJ0bHNcIiwgXCJzbmlcIjogXCIke2FyZ29kb21haW59XCIsIFwiYWxwblwiOiBcIlwiLCBcImZwXCI6IFwiY2hyb21lXCJ9IgoKY2F0ID4gJHtGSUxFX1BBVEh9L2xpc3QudHh0IDw8RU9GCnZtZXNzOi8vJChlY2hvICIkVk1FU1MiIHwgYmFzZTY0IHwgdHIgLWQgJ1xuJykKRU9GCgppZiBbICIkVFVJQ19QT1JUIiAhPSAiIiBdOyB0aGVuCiAgZWNobyAtZSAiXG50dWljOi8vJHtVVUlEfTphZG1pbkAke0lQfToke1RVSUNfUE9SVH0/c25pPXd3dy5iaW5nLmNvbSZhbHBuPWgzJmNvbmdlc3Rpb25fY29udHJvbD1iYnIjJChjb3N0b21fbmFtZSkiID4+ICR7RklMRV9QQVRIfS9saXN0LnR4dApmaQoKaWYgWyAiJEhZMl9QT1JUIiAhPSAiIiBdOyB0aGVuCiAgZWNobyAtZSAiXG5oeXN0ZXJpYTI6Ly8ke1VVSUR9QCR7SVB9OiR7SFkyX1BPUlR9Lz9zbmk9d3d3LmJpbmcuY29tJmFscG49aDMmaW5zZWN1cmU9MSMkKGNvc3RvbV9uYW1lKSIgPj4gJHtGSUxFX1BBVEh9L2xpc3QudHh0CmZpCgppZiBbICIkUkVBTElUWV9QT1JUIiAhPSAiIiBdOyB0aGVuCiAgZWNobyAtZSAiXG52bGVzczovLyR7VVVJRH1AJHtJUH06JHtSRUFMSVRZX1BPUlR9P2VuY3J5cHRpb249bm9uZSZmbG93PXh0bHMtcnByeC12aXNpb24mc2VjdXJpdHk9cmVhbGl0eSZzbmk9d3d3Lm5hemh1bWkuY29tJmZwPWNocm9tZSZwYms9JHtwdWJsaWNfa2V5fSZ0eXBlPXRjcCZoZWFkZXJUeXBlPW5vbmUjJChjb3N0b21fbmFtZSkiID4+ICR7RklMRV9QQVRIfS9saXN0LnR4dApmaQoKYmFzZTY0ICR7RklMRV9QQVRIfS9saXN0LnR4dCB8IHRyIC1kICdcbicgPiAke0ZJTEVfUEFUSH0vc3ViLnR4dApjYXQgJHtGSUxFX1BBVEh9L2xpc3QudHh0CmVjaG8gLWUgIlxuXG5cZVsxOzMybSR7RklMRV9QQVRIfS9zdWIudHh0IHNhdmVkIHN1Y2Nlc3NmdWxseVxlWzBtIgp1cGxvZF9ub2RlcwpzZW5kX3RlbGVncmFtCmVjaG8gLWUgIlxuXGVbMTszMm1SdW5uaW5nIGRvbmUhXGVbMG1cbiIKc2xlZXAgMSAKCnJtIC1yZiAke0ZJTEVfUEFUSH0vYm9vdC5sb2cgJHtGSUxFX1BBVEh9L2NvbmZpZy5qc29uICR7RklMRV9QQVRIfS9zYi5sb2cgJHtGSUxFX1BBVEh9L2NvcmUgJHtGSUxFX1BBVEh9L2Zha2VfdXNlcmFnZW50XzAuMi4wLmpzb24gJHtGSUxFX1BBVEh9L2xpc3QudHh0ICR7RklMRV9QQVRIfS90dW5uZWwuanNvbiAke0ZJTEVfUEFUSH0vdHVubmVsLnltbCA+L2Rldi9udWxsIDI+JjEKZWNobyAtZSAiXGVbMTszMm3mraTohJrmnKznlLHogIHnjovnvJbor5EsXGVbMTszNW1HaXRodWLvvJpodHRwczovL2dpdGh1Yi5jb20vZW9vY2VcZVswbSIKZWNobyAtZSAiXGVbMTszMm1Zb3V0dWJl6aKR6YGT77yaXGVbMTszNW1odHRwczovL3d3dy55b3V0dWJlLmNvbS9AZW9vY2VcZVswbSIKZWNobyAtZSAiXGVbMTszMm1UZWxlZ3Jhbee+pOe7hO+8mlxlWzE7MzVtaHR0cHM6Ly90Lm1lL2Vvb2NldVxlWzBtXG4i" | base64 -d | bash
